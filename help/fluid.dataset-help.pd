#N canvas 48 76 695 855 12;
#X obj 17 13 cnv 15 660 42 empty empty fluid.dataset 1 22 0 36 #4ba3fb #ffffff 0;
#X obj 17 60 cnv 15 488 17 empty empty A\ set\ of\ data\ associated\ with\ identifiers. 4 8 0 13 #e0e0e0 #404040 0;
#X obj 509 60 fluid.referencelauncher fluid.dataset.html reference/dataset/;
#X text 17 79 FluidDataSet is a container associating data points with identifiers.;
#X text 17 139 The fluid.dataset~ object is central to the FluCoMa data analysis objects. It is used for storing many data points \, each of which will be attached to an identifier \, also known as a key. All of the data points in a dataset must have the same number of dimensions, f 93;
#X msg 19 263 0.1 0.2 0.3;
#X obj 19 287 array set point;
#X obj 546 251 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 546 271 array get point;
#X listbox 546 295 18 0 0 0 - - - 0;
#X obj 532 191 array define point 3;
#X obj 19 581 fluid.dataset help.dataset;
#X obj 19 635 print;
#X text 210 578 fluid.dataset will report back when an operation is complete from its right outlet. You can use this to chain together processes., f 46;
#X obj 19 339 cnv 15 212 100 empty empty empty 20 12 0 14 #0400ff #404040 0;
#X obj 20 340 cnv 15 210 98 empty empty empty 20 12 0 14 #e0e0e0 #404040 0;
#X obj 242 339 cnv 15 212 100 empty empty empty 20 12 0 14 #0400ff #404040 0;
#X obj 465 339 cnv 15 212 210 empty empty empty 20 12 0 14 #0400ff #404040 0;
#X obj 243 340 cnv 15 210 98 empty empty empty 20 12 0 14 #e0e0e0 #404040 0;
#X obj 466 340 cnv 15 210 208 empty empty empty 20 12 0 14 #e0e0e0 #404040 0;
#X obj 19 449 cnv 15 212 100 empty empty empty 20 12 0 14 #0400ff #404040 0;
#X obj 20 450 cnv 15 210 98 empty empty empty 20 12 0 14 #e0e0e0 #404040 0;
#X obj 242 449 cnv 15 212 100 empty empty empty 20 12 0 14 #0400ff #404040 0;
#X obj 243 450 cnv 15 210 98 empty empty empty 20 12 0 14 #e0e0e0 #404040 0;
#X msg 29 369 addpoint numbers point;
#X text 252 392 Overwrite an existing point or create a new one if doesn't exist., f 25;
#X text 29 501 Delete a point with deletepoint <identifier>., f 26;
#X text 252 501 Update the values for an existing point., f 26;
#X text 73 339 Adding Points, f 22;
#X text 519 339 Gettings Points, f 22;
#X text 73 449 Deleting Points, f 22;
#X text 296 449 Updating Points, f 22;
#X msg 252 370 setpoint numbers point;
#X msg 29 479 deletepoint numbers;
#X msg 252 479 updatepoint numbers point;
#X text 296 339 Setting Points, f 22;
#X msg 475 369 getpoint numbers query;
#X obj 546 213 array define query;
#X obj 547 463 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X listbox 547 505 14 0 0 0 - - - 0;
#X obj 547 482 array get query;
#X text 29 391 Add a point with the message addpoint <identifier> <array>., f 24;
#X text 475 391 Retrieve the values for a given identifier. Outputs to an array., f 26;
#X obj 135 266 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X text 136 265 1) Store a list of numbers in an array. These numbers could be anything \, including audio-descriptor data \, synthesiser parameters or anything!, f 54;
#X obj 475 642 cnv 15 202 196 empty empty More\ information 4 10 0 13 #e0e0e0 #404040 0;
#N canvas 312 44 693 963 audio-descriptor_example 0;
#X obj 17 13 cnv 15 660 42 empty empty fluid.dataset 1 22 0 36 #4ba3fb #ffffff 0;
#X text 17 79 An example of storing audio descriptors into a fluid.dataset~, f 63;
#X obj 18 397 fluid.dataset sound-analysis;
#X obj 465 850 array define help.dataset.src;
#X obj 339 873 clone fluid.multiarray 13 help.dataset.features;
#X obj 297 896 clone fluid.multiarray 13 help.dataset.features.stats;
#X obj 353 919 array define help.dataset.features.stats.flat;
#N canvas 1600 23 448 179 loadsrc 0;
#X obj 16 83 soundfiler;
#X obj 16 19 loadbang;
#X msg 16 41 read -resize media/Tremblay-ASWINE-ScratchySynth-M.wav help.dataset.src;
#X connect 1 0 2 0;
#X connect 2 0 0 0;
#X restore 18 121 pd loadsrc;
#X obj 70 423 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 70 448 fluid.ds2text sound-analysis help.dataset.text.2, f 49;
#X obj 70 478 text define help.dataset.text.2;
#X text 99 421 store dataset into a text object;
#X text 302 478 <- double-click 'text' to see data, f 18;
#X obj 18 676 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 18 696 array get help.dataset.features.stats.query;
#X listbox 19 813 107 0 0 0 - - - 10;
#X obj 18 652 route getpoint;
#X obj 28 727 print scratch-synth:;
#X obj 182 727 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X text 26 795 excerpt from the data in the array, f 64;
#X obj 12 207 cnv 15 380 135 empty empty empty 20 12 0 14 #e0e0e0 #404040 0;
#X obj 18 269 fluid.bufstats -source help.dataset.features -stats help.dataset.features.stats -numderivs 0;
#X obj 18 307 fluid.bufflatten -source help.dataset.features.stats -destination help.dataset.features.stats.flat;
#X msg 18 373 setpoint scratch-synth help.dataset.features.stats.flat;
#X obj 18 231 fluid.bufmfcc 13 -source help.dataset.src -features help.dataset.features;
#X obj 18 210 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 17 161 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X text 18 160 1) Analyse the buffer named src with the mel-frequency cepstrum coefficient descriptor. Calculate the statistics across each coefficient per spectral frame and flatten the data to a single dimension., f 84;
#X obj 15 531 cnv 15 640 85 empty empty empty 20 12 0 14 #e0e0e0 #404040 0;
#X obj 18 537 route setpoint;
#X obj 18 585 fluid.dataset sound-analysis;
#X msg 18 561 getpoint scratch-synth help.dataset.features.stats.query;
#X obj 317 591 array define help.dataset.features.stats.query;
#X text 435 541 'getpoint' outputs the given point data ('scratch-synth') into an array, f 29;
#X text 183 726 2) Open the Pd window to see the data that was generated and stored in the dataset with the identity "scratch-synth", f 42;
#X connect 2 0 8 0;
#X connect 2 0 29 0;
#X connect 8 0 9 0;
#X connect 13 0 14 0;
#X connect 14 0 15 0;
#X connect 14 0 17 0;
#X connect 16 0 13 0;
#X connect 21 0 22 0;
#X connect 22 0 23 0;
#X connect 23 0 2 0;
#X connect 24 0 21 0;
#X connect 25 0 24 0;
#X connect 29 0 31 0;
#X connect 30 0 16 0;
#X connect 31 0 30 0;
#X restore 478 663 pd audio-descriptor_example;
#N canvas 110 98 703 609 other_messages 0;
#X obj 17 13 cnv 15 660 42 empty empty fluid.dataset 1 22 0 36 #4ba3fb #ffffff 0;
#X text 17 79 Other useful messages that can be used with fluid.dataset~;
#X obj 57 130 loadbang;
#N canvas 892 375 409 492 make_dummy_dataset 0;
#X obj 37 37 inlet;
#X obj 37 132 until;
#X obj 37 160 f;
#X obj 101 152 + 1;
#X msg 117 121 0;
#X obj 37 224 trigger float float;
#X msg 37 319 setpoint foo\$1 datapoint;
#X msg 37 104 100;
#X obj 168 253 array set datapoint;
#X obj 202 231 array define datapoint 1;
#X obj 101 176 % 100;
#X obj 37 343 fluid.dataset help.other;
#X connect 0 0 7 0;
#X connect 1 0 2 0;
#X connect 2 0 5 0;
#X connect 2 0 3 0;
#X connect 3 0 10 0;
#X connect 4 0 2 1;
#X connect 5 0 6 0;
#X connect 5 1 8 0;
#X connect 6 0 11 0;
#X connect 7 0 1 0;
#X connect 10 0 2 1;
#X restore 57 154 pd make_dummy_dataset;
#X msg 94 248 size;
#X msg 114 288 cols;
#X msg 134 358 print;
#X msg 154 388 clear;
#X msg 74 218 read myfile.json;
#X msg 54 188 write myfile.json;
#X obj 51 490 fluid.dataset help.other;
#X obj 51 514 print left;
#X obj 215 514 print right;
#X obj 195 190 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X obj 213 218 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X obj 144 248 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X obj 163 288 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X obj 184 358 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X obj 204 390 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X text 195 188 1) write a fluid.dataset to disk;
#X text 212 217 2) Read a fluid.dataset~ from disk;
#X text 143 246 3) Get the size (the number of <identifier> <data> pairs in the dataset) \, which is reported out the left outlet.;
#X text 162 286 4) Get the number of columns \, or dimensions of the data points. Since all points must have the same number of dimensions \, this is just a single number. It is reported out the left outlet.;
#X text 183 357 5) Dump the contents of the fluid.dataset~ to the console;
#X text 204 388 6) Completely empty and reset a fluid.dataset~;
#X connect 2 0 3 0;
#X connect 4 0 10 0;
#X connect 5 0 10 0;
#X connect 6 0 10 0;
#X connect 7 0 10 0;
#X connect 8 0 10 0;
#X connect 9 0 10 0;
#X connect 10 0 11 0;
#X connect 10 1 12 0;
#X restore 478 685 pd other_messages;
#N canvas 131 150 696 630 merging 0;
#X obj 17 13 cnv 15 660 42 empty empty fluid.dataset 1 22 0 36 #4ba3fb #ffffff 0;
#X text 17 79 You can merge the points in one dataset with another. If the dataset you call merge on already has a key existing in the dataset you want to merge \, the caller's will be preserved. Any keys not found in the dataset to merge will be added to the caller., f 84;
#X obj 51 165 loadbang;
#N canvas 819 469 409 492 make_dummy_dataset 0;
#X obj 37 37 inlet;
#X obj 37 132 until;
#X obj 37 160 f;
#X obj 98 158 + 1;
#X msg 117 121 0;
#X obj 37 224 trigger float float;
#X obj 37 367 outlet;
#X obj 202 231 array define datapoint.4 1;
#X obj 168 253 array set datapoint.4;
#X msg 37 319 setpoint foo\$1 datapoint.4;
#X obj 37 61 t b b;
#X msg 162 120 clear;
#X msg 37 104 4;
#X connect 0 0 10 0;
#X connect 1 0 2 0;
#X connect 2 0 5 0;
#X connect 2 0 3 0;
#X connect 3 0 2 1;
#X connect 4 0 2 1;
#X connect 5 0 9 0;
#X connect 5 1 8 0;
#X connect 9 0 6 0;
#X connect 10 0 12 0;
#X connect 10 1 4 0;
#X connect 10 1 11 0;
#X connect 11 0 6 0;
#X connect 12 0 1 0;
#X restore 51 312 pd make_dummy_dataset;
#N canvas 1020 300 409 492 make_dummy_dataset 0;
#X obj 37 37 inlet;
#X obj 37 224 trigger float float;
#X obj 37 367 outlet;
#X obj 202 231 array define datapoint.4b 1;
#X obj 167 284 array set datapoint.4b;
#X obj 37 132 until;
#X obj 37 160 f;
#X obj 98 158 + 1;
#X obj 37 61 t b b;
#X msg 162 120 clear;
#X msg 37 319 setpoint foo\$1 datapoint.4b;
#X obj 168 258 + 100;
#X msg 37 104 4;
#X msg 117 121 2;
#X connect 0 0 8 0;
#X connect 1 0 10 0;
#X connect 1 1 11 0;
#X connect 5 0 6 0;
#X connect 6 0 7 0;
#X connect 6 0 1 0;
#X connect 7 0 6 1;
#X connect 8 0 12 0;
#X connect 8 1 13 0;
#X connect 8 1 9 0;
#X connect 9 0 2 0;
#X connect 10 0 2 0;
#X connect 11 0 4 0;
#X connect 12 0 5 0;
#X connect 13 0 6 1;
#X restore 291 312 pd make_dummy_dataset;
#X obj 51 416 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X text 72 413 store dataset into a text object, f 16;
#X obj 51 534 text define help.dataset.merge.text.1;
#X f 27;
#X obj 291 416 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X text 312 413 store dataset into a text object, f 16;
#X obj 51 190 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 291 534 text define help.dataset.merge.text.2;
#X f 27;
#X obj 51 210 t b b;
#X obj 490 540 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X obj 242 151 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X text 243 149 2) click the message to merge and inspect again the text below to see the effect, f 41;
#X text 490 539 1) open the text objects to see the sources, f 25;
#X obj 51 471 fluid.ds2text help.dataset.merge.data.1 help.dataset.merge.text.1, f 27;
#X obj 291 471 fluid.ds2text help.dataset.merge.data.2 help.dataset.merge.text.2, f 27;
#X obj 291 348 fluid.dataset help.dataset.merge.data.2, f 29;
#X obj 51 348 fluid.dataset help.dataset.merge.data.1, f 29;
#X obj 353 216 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X text 354 214 3) by default \, merge will not overwrite a point with the same identifier., f 39;
#X msg 243 186 merge help.dataset.merge.data.1;
#X msg 354 251 merge help.dataset.merge.data.1 1;
#X connect 2 0 10 0;
#X connect 3 0 20 0;
#X connect 4 0 19 0;
#X connect 5 0 17 0;
#X connect 8 0 18 0;
#X connect 10 0 12 0;
#X connect 12 0 3 0;
#X connect 12 1 4 0;
#X connect 19 0 8 0;
#X connect 20 0 5 0;
#X connect 23 0 19 0;
#X connect 24 0 19 0;
#X restore 478 729 pd merging;
#X obj 193 370 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X text 192 369 2);
#X obj 173 480 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X obj 417 371 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X obj 436 480 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X obj 641 370 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X text 173 478 3);
#X text 417 369 4);
#X text 436 478 5);
#X text 641 368 6);
#X obj 567 463 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X text 567 461 7);
#X obj 19 680 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 40 679 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X obj 19 761 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X obj 19 705 fluid.ds2text help.dataset help.dataset.text.1, f 27;
#X obj 19 784 text define help.dataset.text.1;
#X text 41 678 8) store dataset into a text object;
#N canvas 126 91 691 591 using_text 0;
#X obj 17 13 cnv 15 660 42 empty empty fluid.dataset 1 22 0 36 #4ba3fb #ffffff 0;
#X obj 27 542 fluid.dataset help.dataset.4;
#X obj 488 124 array define digitsdata 4;
#X obj 502 147 array define tensdata 4;
#X obj 474 170 array define hundredsdata 4;
#X obj 467 193 array define thousandsdata 4;
#X msg 57 390 addpoint digits digitsdata, f 16;
#X msg 47 428 addpoint tens tensdata, f 14;
#X msg 37 466 addpoint hundreds hundredsdata, f 18;
#X msg 27 504 addpoint thousands thousandsdata, f 19;
#X obj 368 342 bng 15 250 50 0 empty empty empty 17 7 0 10 #c6ffc7 #000000 #000000;
#X obj 389 342 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X obj 369 440 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X obj 368 365 fluid.ds2text help.dataset.4 help.dataset.4.text, f 27;
#X obj 382 476 text define help.dataset.4.text;
#X msg 27 218 \; digitsdata 0 1 2 3 4 \; tensdata 0 10 20 30 40 \; hundredsdata 0 100 200 300 400 \; thousandsdata 0 1000 2000 3000 4000, f 36;
#X text 17 79 Using text;
#X text 17 139 Output data from fluid.dataset into a text object to see it.;
#X obj 27 195 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X text 28 194 1) load data into some arrays;
#X obj 57 347 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X text 58 346 2) add points: addpoint <name><arraynamewithdata>, f 36;
#X text 390 341 3) output the data into a text object;
#X obj 27 349 bng 15 250 50 0 empty empty empty 17 7 0 10 #c6ffc7 #000000 #000000;
#X text 369 438 4) click the text object to see the contents, f 27;
#X connect 6 0 1 0;
#X connect 7 0 1 0;
#X connect 8 0 1 0;
#X connect 9 0 1 0;
#X connect 10 0 13 0;
#X connect 23 0 6 0;
#X connect 23 0 7 0;
#X connect 23 0 8 0;
#X connect 23 0 9 0;
#X restore 478 707 pd using_text;
#X obj 478 817 note_on_automatic_datasets;
#N canvas 422 182 696 583 nearest_neighbour_search 0;
#X obj 17 4 cnv 15 660 42 empty empty fluid.dataset 1 22 0 36 #4ba3fb #ffffff 0;
#N canvas 758 131 670 326 loadsrc 0;
#X obj 90 -2 loadbang;
#X obj 316 183 array set help.ds.buffer.grid-1;
#X obj 95 230 clone fluid.multiarray 2 help.ds.buffer.grid 9;
#X msg 90 22 9;
#X obj 90 67 until;
#X obj 90 91 f;
#X obj 130 89 + 1;
#X msg 158 57 0;
#X obj 90 115 t f f f f;
#X obj 92 157 expr int($f1 / 3) / 2;
#X obj 316 137 expr ($f1 % 3) / 2;
#X obj 93 183 array set help.ds.buffer.grid-0;
#X obj 41 291 fluid.dataset help.ds.ds.grid;
#X obj 41 45 t b f;
#X msg 41 259 frombuffer help.ds.buffer.grid;
#X connect 0 0 3 0;
#X connect 3 0 13 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 5 0 8 0;
#X connect 6 0 5 1;
#X connect 7 0 5 1;
#X connect 8 0 9 0;
#X connect 8 1 11 1;
#X connect 8 2 10 0;
#X connect 8 3 1 1;
#X connect 9 0 11 0;
#X connect 10 0 1 0;
#X connect 13 0 14 0;
#X connect 13 1 4 0;
#X connect 14 0 12 0;
#X restore 531 480 pd loadsrc;
#X obj 31 251 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X obj 32 408 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X obj 34 158 bng 15 250 50 0 empty empty empty 17 7 0 10 #c6ffc7 #000000 #000000;
#X obj 55 158 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X obj 34 181 fluid.ds2text help.ds.ds.grid help.ds.ds.txt, f 27;
#X obj 231 208 text define help.ds.ds.txt;
#X text 32 250 2) make a point to query;
#X obj 33 323 pack f f;
#X floatatom 32 272 5 0 0 0 - - - 0;
#X floatatom 79 273 5 0 0 0 - - - 0;
#X obj 79 296 t b f;
#X text 33 407 3) request the 9 nearest neighbourgs;
#X msg 32 439 knearest help.ds.query 9;
#X listbox 32 537 51 0 0 0 - - - 0;
#X obj 32 465 fluid.dataset help.ds.ds.grid;
#X obj 33 347 array set help.ds.query;
#X obj 203 346 array define help.ds.query 2;
#X obj 32 490 route knearest;
#X obj 32 514 list;
#X text 56 157 1) dump the simple grid dataset to the [text] below to see its content, f 70;
#X text 17 55 A fluid.dataset can be queried with an input point to return the nearest match to that point. Note: This feature is can be computationally expensive on a large dataset \, as it needs to compute the distance of the queried point to each point in the dataset. If you need to perform multiple nearest neighbour queries on a fluid.dataset it is recommended to use fluid.kdtree. This facility is most useful with smaller \, ephemeral datasets such as those returned by fluid.datasetquery., f 89;
#X connect 4 0 6 0;
#X connect 9 0 17 0;
#X connect 10 0 9 0;
#X connect 11 0 12 0;
#X connect 12 0 9 0;
#X connect 12 1 9 1;
#X connect 14 0 16 0;
#X connect 16 0 19 0;
#X connect 19 0 20 0;
#X connect 20 0 15 0;
#X restore 478 795 pd nearest_neighbour_search;
#X text 20 759 9) click 'text' to see data;
#N canvas 430 89 694 724 datasets_from_arrays 0;
#X obj 17 4 cnv 15 660 42 empty empty fluid.dataset 1 22 0 36 #4ba3fb #ffffff 0;
#N canvas 0 23 448 179 loadsrc 0;
#X obj 16 83 soundfiler;
#X obj 16 19 loadbang;
#X msg 16 41 read -resize media/Nicol-LoopE-M.wav help.ds.buffers.source;
#X connect 1 0 2 0;
#X connect 2 0 0 0;
#X restore 34 163 pd loadsrc;
#X obj 34 250 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 54 250 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X text 55 249 1) trigger audio-descriptor analysis;
#X obj 428 123 array define help.ds.buffers.source;
#X obj 34 270 fluid.bufspectralshape -source help.ds.buffers.source -features help.ds.buffers.features;
#X obj 330 146 clone fluid.multiarray 7 help.ds.buffers.features;
#X obj 351 169 clone fluid.multiarray 7 help.ds.buffers.stats;
#X obj 34 310 fluid.bufstats -source help.ds.buffers.features -stats help.ds.buffers.stats;
#X msg 34 427 frombuffer help.ds.buffers.stats \, print;
#X obj 33 487 fluid.dataset help.ds.buffers;
#X obj 33 525 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X text 53 522 store dataset into a text object;
#X obj 33 550 fluid.ds2text help.ds.buffers help.ds.buffers.text, f 27;
#X obj 33 604 text define help.ds.buffers.text;
#X obj 34 376 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X text 35 375 2) From an array;
#X obj 287 606 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X text 267 605 <- 3) click to see data, f 12;
#X obj 463 396 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X text 414 274 Analyse spectral shape features of the source, f 23;
#X text 420 312 Compute the stats across each spectral shape feature, f 28;
#X text 32 391 frombuffer messages copies the contents of the buffer you provide as an argument to the dataset., f 49;
#N canvas 375 584 477 348 transposition 0;
#X obj 20 129 outlet;
#X msg 20 93 frombuffer help.ds.buffers.stats 1 \, print;
#X text 21 35 You can provide an optional number (0 or 1) to change the transposition of the copying., f 46;
#X text 21 199 By default \, each row is layed out framewise \, so all of channel 1 is ordered in time as the columns of identifier 0 When frombuffer <buffer> 1 is passed (implicitly 0) \, the copying is transposed. This means each identifier will contain the same index across all channels as the columns of a given identifier.;
#X connect 1 0 0 0;
#X restore 50 453 pd transposition;
#X msg 466 444 frombuffer help.ds.buffers.stats 1, f 23;
#X text 464 395 4) You can provide an optional number (0 or 1) to change the transposition of the copying., f 30;
#X obj 459 520 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X text 460 519 5) Finally \, you can provide a labelset that will associate each channel to an identifier., f 30;
#X msg 462 568 frombuffer help.ds.buffers.stats 0 help.ds.features, f 23;
#N canvas 439 695 664 116 further_explanations_on_the_transposition_flag 0;
#X text 16 20 By default \, each row is layed out framewise \, so all of channel 1 is ordered in time as the columns of identifier 0 When frombuffer <buffer> 1 is passed (implicitly 0) \, the copying is transposed. This means each identifier will contain the same index across all channels as the columns of a given identifier., f 88;
#X restore 33 689 pd further_explanations_on_the_transposition_flag;
#N canvas 297 240 450 473 prepare_the_labelset 0;
#X obj 42 322 fluid.labelset help.ds.features;
#X obj 41 39 loadbang;
#X obj 155 201 list store centroid spread skewness kurtosis rolloff flatness crest, f 35;
#X obj 40 85 until;
#X msg 41 63 7;
#X obj 40 133 t f f;
#X msg 156 175 get \$1;
#X obj 89 110 + 1;
#X obj 40 212 makefilename %d;
#X obj 40 239 pack s s;
#X obj 40 109 f;
#X msg 40 263 addlabel \$1 \$2;
#X connect 1 0 4 0;
#X connect 2 0 9 1;
#X connect 3 0 10 0;
#X connect 4 0 3 0;
#X connect 5 0 8 0;
#X connect 5 1 6 0;
#X connect 5 1 7 0;
#X connect 6 0 2 0;
#X connect 7 0 10 1;
#X connect 8 0 9 0;
#X connect 9 0 11 0;
#X connect 10 0 5 0;
#X connect 11 0 0 0;
#X restore 460 687 pd prepare_the_labelset;
#X text 18 71 A fluid.dataset~ can be created from the contents of an multi-array., f 74;
#X connect 2 0 6 0;
#X connect 6 0 9 0;
#X connect 10 0 11 0;
#X connect 11 0 12 0;
#X connect 12 0 14 0;
#X connect 24 0 11 0;
#X connect 25 0 11 0;
#X connect 29 0 11 0;
#X restore 478 751 pd datasets_from_arrays;
#N canvas 137 158 690 844 datasets_to_arrays 0;
#X obj 17 4 cnv 15 660 42 empty empty fluid.dataset 1 22 0 36 #4ba3fb #ffffff 0;
#X obj 30 144 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 50 144 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#N canvas 237 275 450 278 (subpatch) 0;
#X array help.ds.buffers.arrays-1 2 float 2;
#X coords 0 -0.1 2 1.1 200 40 1 0 0;
#X restore 30 662 graph;
#N canvas 237 275 450 278 (subpatch) 0;
#X array help.ds.buffers.arrays-2 2 float 2;
#X coords 0 -0.1 2 1.1 200 40 1 0 0;
#X restore 30 725 graph;
#N canvas 237 275 450 278 (subpatch) 0;
#X array help.ds.buffers.arrays-3 2 float 2;
#X coords 0 -0.1 2 1.1 200 40 1 0 0;
#X restore 30 782 graph;
#X obj 28 212 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X obj 101 359 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X obj 211 459 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X text 17 70 A fluid.dataset~ can be converted from its internal representation to a multi-array too., f 74;
#X text 51 142 1) make a simple 2D dataset;
#N canvas 709 211 463 525 make_simple_ds 0;
#X obj 18 37 inlet;
#X msg 141 99 0;
#X msg 37 92 4;
#X obj 36 152 f;
#X obj 37 116 until;
#X obj 95 153 + 1;
#X obj 140 477 array define ds.tobuf.temp 2;
#X obj 36 176 t f f f;
#X obj 63 272 array set ds.tobuf.temp;
#X obj 63 242 pack f f;
#X obj 59 214 div 2;
#X obj 151 214 mod 2;
#X msg 36 310 get \$1;
#X msg 36 362 addpoint \$1 ds.tobuf.temp;
#X obj 18 61 t b b b, f 25;
#X obj 36 386 fluid.dataset help.ds.tobuffers;
#X msg 24 415 print;
#X obj 36 338 list store bottom_left top_left bottom_right top_right;
#X msg 266 303 clear;
#X connect 0 0 14 0;
#X connect 1 0 3 1;
#X connect 2 0 4 0;
#X connect 3 0 7 0;
#X connect 4 0 3 0;
#X connect 5 0 3 1;
#X connect 7 0 12 0;
#X connect 7 1 10 0;
#X connect 7 2 5 0;
#X connect 7 2 11 0;
#X connect 9 0 8 0;
#X connect 10 0 9 0;
#X connect 11 0 9 1;
#X connect 12 0 17 0;
#X connect 13 0 15 0;
#X connect 14 0 16 0;
#X connect 14 1 2 0;
#X connect 14 2 1 0;
#X connect 14 2 18 0;
#X connect 16 0 15 0;
#X connect 17 0 13 0;
#X connect 18 0 15 0;
#X restore 30 164 pd make_simple_ds;
#X text 29 211 2) tobuffer messages copies the contents of the dataset to the multiarray provided as an argument., f 50;
#X obj 33 541 fluid.dataset help.ds.tobuffers;
#X msg 32 249 tobuffer help.ds.buffers.arrays;
#N canvas 237 275 450 278 (subpatch) 0;
#X array help.ds.buffers.arrays-0 2 float 2;
#X coords 0 -0.1 2 1.1 200 40 1 0 0;
#X restore 29 599 graph;
#N canvas 283 490 460 300 more_explanations_on_transposition 0;
#X text 24 12 By default \, each point/item is layed out framewise \, so the 0th frame is the first item \, where each dimension is a channel. When tobuffer <multiarray> 1 is passed \, the copying is transposed. This means each channel will hold a point \, and each frame will represent a dimension.;
#X restore 54 275 pd more_explanations_on_transposition;
#X msg 101 334 tobuffer help.ds.buffers.arrays 1 help.ds.tobuffer.labels;
#X text 101 358 3) You can provide an optional number (0 or 1) to change the transposition of the copying \, and an optional labelset to get.;
#X text 212 458 4) Finally \, you can swap the order of the entries in the labelset. This is convenient to retrieve from an original identifier on what frame/channel a point/item will be found;
#X msg 166 435 tobuffer help.ds.buffers.arrays 1 help.ds.tobuffer.labels 1;
#X obj 293 795 fluid.labelset help.ds.tobuffer.labels;
#X obj 293 761 text define help.ds.tobuffer.labels.txt;
#X obj 272 566 fluid.ls2text help.ds.tobuffer.labels help.ds.tobuffer.labels.txt;
#X obj 291 741 cnv 15 15 15 empty empty empty 20 12 0 14 #c6ffc7 #404040 0;
#X text 292 740 5) Click the text to see the labelset;
#X connect 1 0 11 0;
#X connect 13 0 23 0;
#X connect 14 0 13 0;
#X connect 17 0 13 0;
#X connect 20 0 13 0;
#X restore 478 773 pd datasets_to_arrays;
#X connect 5 0 6 0;
#X connect 7 0 8 0;
#X connect 8 0 9 0;
#X connect 11 0 12 0;
#X connect 24 0 11 0;
#X connect 32 0 11 0;
#X connect 33 0 11 0;
#X connect 34 0 11 0;
#X connect 36 0 11 0;
#X connect 38 0 40 0;
#X connect 40 0 39 0;
#X connect 61 0 64 0;
